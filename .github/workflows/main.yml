name: TODO Scanner and Discord Update

on:
  push:
    branches:
      - '**'  # Run on all branches
  schedule:
    - cron: '0 0 * * *'  # Optional: daily scheduled run

jobs:
  scan_todos:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get branch name
        id: vars
        run: echo "branch_name=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV

      - name: Scan codebase for TODOs
        run: |
          echo "**TODO list**" > todo.md
          
          # Search for TODO comments, format them as bullet points, and append to todo.md
          grep -r -n "TODO" \
            --exclude=*.yml \
            --exclude=todo.md \
            --exclude-dir={.git,node_modules,build,.github} \
            . | while IFS=: read -r filepath line todo; do
            echo "- ${filepath}:${line} ${todo}" >> todo.md
          done
          
          # Display the contents of todo.md for debugging
          cat todo.md

      - name: Commit and push todo.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add todo.md
            git commit -m "Update TODO list [skip ci]"
            git push
          fi

      - name: Send TODO list to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          # Use the content of todo.md as the payload for the Discord message with Markdown formatting
          TODO_CONTENT=$(<todo.md)
          
          # Prepend branch name as the title
          TITLE="## Branch: ${{ env.branch_name }}\n\n"
          
          # Combine the title and the TODO content
          FINAL_CONTENT="$TITLE$TODO_CONTENT"
          
          # Send the JSON payload to the Discord webhook and capture the message ID
          RESPONSE=$(curl -X POST -H "Content-Type: application/json" \
            -d "$(jq -n --arg content "$FINAL_CONTENT" '{content: $content}')" \
            "$DISCORD_WEBHOOK_URL")
          
          # Save the last message ID for future deletion
          echo $(echo "$RESPONSE" | jq -r '.id') > last_message_id.txt
